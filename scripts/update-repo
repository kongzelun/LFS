#!/bin/bash
# 
# update-repo
#
# 1.1: Add '--clear'.
#

VERSION=1.1
REPODIR=/home/.repository
PACKAGEDIR=~/makepkg/packages

# options
REPLACE=0
CLEAR=0
TARGET=

# functions
update() {
    local repo
    repo=$1
    local pkg
    pkg=$2

    pkgname=$(find ~/makepkg/packages -type f -regex "$HOME/makepkg/packages/$pkg-[0-9]+:\([0-9]+\.?\)+-[0-9]+-\(x86_64\).pkg.tar.zst" -printf "%f\n")
    if [ -f $PACKAGEDIR/$pkgname ]; then
        sudo rm -f $REPODIR/$repo/$pkgname
        sudo mv $PACKAGEDIR/$pkgname $REPODIR/$repo
        sudo repo-add -R $REPODIR/$repo/$repo.db.tar.zst $REPODIR/$repo/$pkgname
    fi

    if (( REPLACE )) ; then
        pkgname=$(find $REPODIR/$repo -type f -regex "$REPODIR/$repo/$pkg-[0-9]+:\([0-9]+\.?\)+-[0-9]+-\(x86_64\).pkg.tar.zst" -printf "%f\n")
        if [ -f $REPODIR/$repo/$pkgname ]; then
            sudo repo-add -R $REPODIR/$repo/$repo.db.tar.zst $REPODIR/$repo/$pkgname
        fi
    fi
}

usage() {
	printf "update_repo (kzl-linux) %s\n" "$VERSION"
	echo
	printf "\"update-repo\" will update the pacman repository.\n"
	echo
	printf "Usage: update_repo [options] [repo]\n"
	echo
	echo "    -h, --help        display this help message and exit"
	echo "    -v, --version     display version information and exit"
	echo "    -t, --target      build target (kzl, rpi tegra, ubuntu)"
    echo "    -R, --replace     replace old repo"
    echo "    --clear           clear the specified repository"
    echo
}

# program start

# set -exu -o pipefail
set -e -u -o pipefail

# ensure we have a sane umask set
umask 0022

while (( "$#" )); do
	case "$1" in
        -h|--help)      usage; exit 0 ;;
        -v|--version)   printf "$VERSION"; exit 0 ;;
        -t|--target)    shift; TARGET="$1" ;;
		-R|--replace)   REPLACE=1 ;;
        --clear)        CLEAR=1 ;; 
        *)              printf "unknown option \"$1\"\n"; exit 1 ;;
	esac
    shift
done

case $TARGET in
    kzl|ubuntu)     pkgs=$(ls $ROOTDIR/$TARGET/pkgbuilds) ;;
    # unknown repo
    *)              printf "unknown target \"%s\".\n" "$TARGET"; exit 1 ;;
esac

if (( CLEAR )); then
    sudo rm -rf $REPODIR/$TARGET
    exit 0
fi

if [ ! -d $REPODIR/$TARGET ]; then
    sudo mkdir -p $REPODIR/$TARGET
fi

if (( REPLACE )); then
    sudo find $REPODIR/$TARGET -name "$TARGET.*" -delete
fi

if [ ! -f $REPODIR/$TARGET/$TARGET.db.tar.zst ]; then
    sudo repo-add $REPODIR/$TARGET/$TARGET.db.tar.zst
fi

for pkg in ${pkgs[@]}; do
    case $pkg in
        *)          update $TARGET $pkg ;;
    esac
done
