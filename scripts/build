#!/bin/bash
# 
# build
#

VERSION=1.1

# arguments/options

TARGET=kzl
STAGE=1

# kzl packages

# preparation
kzl_stage0_pkgs=(
    base
    pacman
)

# toolchain
kzl_stage1_pkgs=(
    linux-api-headers glibc binutils gcc libtool
    binutils glibc gcc libtool
)

# base
kzl_stage2_pkgs=(
    ### base
    # ## filesystem
    # iana-etc tzdata filesystem
    # ## zlib
    # zlib
    # ## binutils
    # binutils
    # ## gcc
    # gmp mpfr mpc gcc
    # ## libtool pkgconf
    # libtool pkgconf
    ## glibc
    bison glibc
    ## ncurses readline bash
    ncurses readline bash bash-completion
    ## bzip2 xz
    bzip2 xz
    ## gzip
    pcre less gzip 
    ## tar
    acl attr tar
    ## grep sed gawk m4
    grep sed gawk m4
    ## file which findutils
    libseccomp file
    which
    findutils
    ## shadow
    keyutils libldap krb5 libcap-ng swig audit
    libxcrypt
    libtirpc pam
    shadow
    ## coreutils
    libcap openssl coreutils
    ## util-linux
    util-linux
    ## e2fsprogs
    e2fsprogs
    ## procps-ng psmisc
    procps-ng psmisc
    ## perl
    db gdbm perl
    ## autoconf automake
    diffutils autoconf
    automake
    ## patch
    ed patch
    ## make
    gc libffi libunistring guile make
    ## dbus
    expat autoconf-archive dbus
    ## iproute2
    elfutils
    libmnl libnfnetlink libnetfilter_conntrack libnftnl libnl libpcap iptables
    iproute2 
    ## iputils
    libidn2 iputils
    ## systemd
    argon2 libaio icu hwloc ldns libedit openssh openmpi boost thin-provisioning-tools device-mapper json-c popt cryptsetup
    kbd
    kmod
    libgpg-error libgcrypt
    libtasn1 p11-kit
    pcre2
    ca-certificates libnghttp2 publicsuffix-list libpsl libssh2 curl
    kexec-tools
    gnu-efi
    gperf
    nettle gnutls libmicrohttpd
    libxml2 libxslt
    rpcsvc-proto quota
    systemd
    ## pciutils
    pciutils
    ## zstd
    lz4 zstd
    ## pacman
    libassuan npth pinentry tcl sqlite libusb libusb-compat pcsclite gnupg gpgme
    libarchive
    pacman 
    po4a fakeroot pacman-contrib arch-install-scripts
    ## python
    libnsl mpdecimal valgrind python
    ## cmake
    jsoncpp
    libuv
    rhash
    glib2 docbook-xsl itstool xmlto shared-mime-info
    cmake
    ## git
    git
    ## sudo
    sudo
    ## gettext texinfo man-db
    gettext texinfo 
    groff man-db
    ## linux
    bc linux-firmware
    ## base
    base
)

kzl_stage3_pkgs=(
    ### core
    ## zsh
    zsh grml-zsh-config zsh-autosuggestions zsh-syntax-highlighting
    ## tmux
    libevent libutempter tmux
    ## utils
    wpa_supplicant
    wget 
    xxhash rsync
    dosfstools parted
    nano
    ## devtools
    gdb llvm compiler-rt openmp clang rust ruby node
    ## Xlib
    xorg-util-macros xorgproto libxau libxdmcp xcb-proto libxcb xtrans libx11 libice libsm libxt libxext libxrender libxpm
    ## texlive
    libpng freetype2 graphite gobject-introspection harfbuzz freetype2 harfbuzz fontconfig
    nasm libjpeg-turbo lcms2 libidn libpaper libtiff openjpeg ghostscript
    lzo pixman cairo
    gd libsigsegv 
    texlive

    ### testing
    # usbutils
    # nvidia cuda cudnn nccl intel-mkl lapack
    # help2man
)

# ubuntu packages

ubuntu_pkgs=(

)

# tegra packages

tegra_pkgs=(
    pacman pacman-contrib
)

# functions

prepare() {
    (yes yes || :) | sudo pacman -Scc

    if [ ! -f /home/.repository/$TARGET/$TARGET.db ]; then
        update-repo -t $TARGET
    fi

    (yes yes || :) | sudo pacman -Syy
}

get_pkgbase() {
    local pkgbase
    case $1 in
        device-mapper)  pkgbase=lvm2;;
        *)              pkgbase=$1;;
    esac
    echo "$pkgbase"
}

update_key() {
    local pkgbase
    local pkgname
    pkgname=$1
    pkgbase=$(get_pkgbase $pkgname)

    cd $ROOTDIR/$TARGET/pkgbuilds/$pkgbase

    updpkgsums
    gpg --recv-keys $(grep -E -o "[0-9A-F]{40}" PKGBUILD)
}

build() {
    local pkgbase
    local pkgname
    pkgname=$1
    pkgbase=$(get_pkgbase $pkgname)

    cd $ROOTDIR/$TARGET/pkgbuilds/$pkgbase

    local log
    if [ -z $STAGE ]; then
        log="$LOGDIR"/$pkgbase.log
    else
        log="$LOGDIR"/$pkgbase.stage$STAGE.log
    fi
    if [ -f $log ]; then
        rm $log
    fi
    
    makepkg -scCf --noconfirm &>> $log

    update-repo -t $TARGET
    (yes yes || :) | sudo pacman -Scc
    (yes yes || :) | sudo pacman -Sddy --overwrite "*" $pkgname # --config $PACMAN_CONF
}

usage() {
    printf "lfs-build (kzl-linux) %s\n" "$VERSION"
    echo
    printf "lfs-build will build packages from scratch.\n"
    echo
    printf "Usage: lfs-build [options]\n"
    echo
    echo "    -h, --help        display this help message and exit"
    echo "    -v, --version     display version information and exit"
    echo "    -t, --target      build target (kzl(default), rpi, tegra, ubuntu)"
    echo "    -s, --stage       stage (stage0, stage1(default), stage2, stage3)"
    echo
}

# program start

set -e -u -o pipefail
# set -x

umask 0022

while (( "$#" )); do
    case "$1" in
        -h|--help)      usage; exit 0 ;;
        -v|--version)   printf "$VERSION"; exit 0 ;;
        -t|--target)    shift; TARGET="$1" ;;
        -s|--stage)     shift; STAGE="$1" ;;
        *)              printf "unknown option \"$1\""; exit 1 ;;
    esac
    shift
done

BUILDDIR=
LOGDIR=
REPODIR=/home/.repository/$TARGET

case $TARGET in
    kzl)            BUILDDIR=/tmp ;;
    ubuntu|tegra)   BUILDDIR=/dev/shm ;;
    *)              printf "unknown target \"$STAGE\""; exit 1 ;;
esac

LOGDIR=$BUILDDIR

# if [ -d $BUILDDIR/makepkg ]; then
#     rm -rf $BUILDDIR/makepkg
# fi

# 
if [ "$TARGET" = "kzl" ]; then
    case $STAGE in
        0) update-repo --clear -t $TARGET; pkgs=${kzl_stage0_pkgs[@]} ;;
        1) pkgs=${kzl_stage1_pkgs[@]} ;;
        2) pkgs=${kzl_stage2_pkgs[@]} ;;
        3) pkgs=${kzl_stage3_pkgs[@]} ;;
        *) printf "unknown stage \"$STAGE\""; exit 1 ;;
    esac
elif [ "$TARGET" = "ubuntu" ]; then
    pkgs=${ubuntu_pkgs[@]}
elif [ "$TARGET" = "tegra" ]; then
    update-repo --clear -t $TARGET
    pkgs=${tegra_pkgs[@]}
fi

prepare

for p in ${pkgs[@]}; do
    echo "update keys for $p ..."
    update_key $p &
done

wait

# perl: 
# python: fonttools

for p in ${pkgs[@]}; do
    echo "################################################################################"
    echo "   building $p ..."
    echo "################################################################################"
    build $p
done
