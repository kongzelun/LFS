#!/bin/bash
# 
# build
#

VERSION=1.1

# arguments/options

TARGET=
STAGE=0

# kzl packages

# preparation
kzl_stage0_pkgs=(
    base
    pacman
)

# toolchain
kzl_stage1_pkgs=(
    linux-api-headers glibc binutils gcc libtool
    binutils glibc gcc libtool
)

# base
kzl_stage2_pkgs=(
    filesystem
    bash
    dbus systemd
    acl attr libxcrypt openssl libcap libcap-ng coreutils pam shadow util-linux
    perl python
    ca-certificates curl wget
    git
    fakeroot pacman arch-install-scripts pacman-contrib
    dosfstools nano parted
    openssh rsync
    cmake meson ninja
    linux linux-firmware
)

kzl_stage3_pkgs=(
    zsh grml-zsh-config zsh-autosuggestions zsh-syntax-highlighting
    ruby 
    nvidia cuda cudnn nccl intel-mkl lapack
    wpa_supplicant
    libusb usbutils
    tmux
    gobject-introspection graphite harfbuzz ghostscript texlive
    xxhash lz4 popt
)

# ubuntu packages

ubuntu_pkgs=(

)


# functions

prepare() {
    (yes yes || :) | sudo pacman -Scc --config $PACMAN_CONF
    (yes yes || :) | sudo pacman -Syy --config $PACMAN_CONF
}

stage0_prepare() {
    update-repo --clear $TARGET
    update-repo $TARGET
}

build() {
    local pkg
    pkg=$1

    cd $ROOTDIR/$TARGET/pkgbuilds/$pkg

    local log
    log="$LOGDIR"/$pkg.stage$STAGE.log
    if [ -f $log ]; then
        rm $log
    fi
    
    makepkg --config $MAKEPKG_CONF -scCf --skippgpcheck --nocheck --noconfirm &>> $log

    case $pkg in
        *)
            update-repo $TARGET
            (yes yes || :) | sudo pacman -Sddy --config $PACMAN_CONF --overwrite "*" $pkg
            ;;
    esac
}

usage() {
	printf "lfs-build (kzl-linux) %s\n" "$VERSION"
	echo
	printf "lfs-build will build packages from scratch.\n"
	echo
	printf "Usage: lfs-build [options]\n"
	echo
	echo "    -h, --help        display this help message and exit"
	echo "    -v, --version     display version information and exit"
	echo "    -t, --target      build target (kzl, rpi tegra, ubuntu)"
	echo "    -s, --stage       stage (stage0 (default), stage1, stage2, stage3)"
    echo
}

# program start

set -e -u -o pipefail
# set -x

# ensure we have a sane umask set
umask 0022

while (( "$#" )); do
	case "$1" in
        -h|--help)      usage; exit 0 ;;
        -v|--version)   printf "$VERSION"; exit 0 ;;
        -t|--target)    shift; TARGET="$1" ;;
        -s|--stage)     shift; STAGE="$1" ;;
        *)              printf "unknown option \"$1\""; exit 1 ;;
	esac
    shift
done

BUILDDIR=
LOGDIR=
REPODIR=/home/.repository/$TARGET

case $TARGET in
    kzl)            BUILDDIR=/tmp ;;
    ubuntu|tegra)   BUILDDIR=/dev/shm ;;
    *)              printf "unknown target \"$STAGE\""; exit 1 ;;
esac

LOGDIR=$BUILDDIR

if [ -d $BUILDDIR/makepkg ]; then
    rm -rf $BUILDDIR/makepkg
fi

if [ "$TARGET" = "kzl" ]; then
    case $STAGE in
        0) stage0_prepare; pkgs=${stage0_pkgs[@]} ;;
        1) pkgs=${stage1_pkgs[@]} ;;
        2) pkgs=${stage2_pkgs[@]} ;;
        3) pkgs=${stage3_pkgs[@]} ;;
        *) printf "unknown stage \"$STAGE\""; exit 1 ;;
    esac
elif [ "$TARGET" = "ubuntu" ]; then
    pkgs=${ubuntu_pkgs[@]}
fi

prepare

for p in ${pkgs[@]}; do
    echo "building $p ..."
    build $p
done
