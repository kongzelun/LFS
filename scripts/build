#!/bin/bash
# 
# build
#

VERSION=1.0
REPODIR=/var/repository

# options
REPLACE=0

# functions
build() {
    local pkg
    pkg=$1

    cd $pkg

    local log
    log=build.log
    if [[ -f $log ]]; then
        rm $log
    fi

    makepkg -scCf --nocheck --noconfirm &>> $log

    if [ $? -ne 0 ]; then
        failed_pkgs+=(${pkg/#$scriptdir\/\.\.\/$repo\//})
    fi
}

usage() {
	printf "build (kzl-linux) %s\n" "$VERSION"
	echo
	printf "\"build\" will build all packages of the specified repository.\n"
	echo
	printf "Usage: build [options] [repo]\n"
	echo
	echo "    -h, --help        display this help message and exit"
	echo "    -v, --version     display version information and exit"
    echo
}

set -e -x -u -o pipefail

scriptdir=$(pwd)

repo=$1

core_pkgs=(

)

extra_pkgs=(
    
)

community_pkgs=(
    aarch64-linux-gnu-linux-api-headers aarch64-linux-gnu-binutils aarch64-linux-gnu-gcc aarch64-linux-gnu-glibc
    arm-linux-gnueabihf-linux-api-headers arm-linux-gnueabihf-binutils arm-linux-gnueabihf-gcc arm-linux-gnueabihf-glibc
)

failed_pkgs=()

case $repo in
    linux)
        pkgs="$scriptdir"/../linux
        ;;
    core|extra)
        pkgs=$(ls -d $scriptdir/../$1/[a-z]*)
        ;;
    community)
        pkgs=("${community_pkgs[@]/#/$scriptdir\/\.\.\/$repo\/}")
        ;;
    *)
        # unknow repo
        exit 1
        ;;
esac

printf '%s\n' "${pkgs[@]}"

for p in ${pkgs[@]}; do
    build $p
done

if [ ${#failed_pkgs[@]} -eq 0 ]; then
    echo "Build all packages successfully."
else
    printf '%s\n' "${failed_pkgs[@]}"
    exit -1
fi
