#!/bin/bash
# 
# build
#

VERSION=1.1

# arguments/options

TARGET=kzl
STAGE=1

# kzl packages

# preparation
kzl_stage0_pkgs=(
    base
    pacman
)

# toolchain
kzl_stage1_pkgs=(
    linux-api-headers glibc binutils gcc libtool
    binutils glibc gcc libtool
)

# base
kzl_stage2_pkgs=(
    ### base
    # iana-etc tzdata filesystem
    # ncurses readline bash bash-completion
    # bzip2 xz zlib lz4 zstd
    # acl attr gmp keyutils libldap krb5 libcap-ng swig audit libtirpc libxcrypt pam libcap openssl libseccomp file shadow
    # coreutils util-linux e2fsprogs
    # db gdbm perl
    # cmake
    # expat elfutils gc libffi libunistring guile mpfr gdb
    # libnsl mpdecimal tcl sqlite valgrind python
    # findutils icu libxml2 kmod pciutils hwloc libnl openssh openmpi boost
    # argon2 libaio thin-provisioning-tools device-mapper json-c popt cryptsetup
    # diffutils gawk m4 autoconf automake autoconf-archive dbus
    # libmnl libnfnetlink libnetfilter_conntrack libnftnl libpcap iptables
    libidn2 libtasn1 p11-kit nettle gnutls
    ca-certificates curl wget git
    kbd libgcrypt libgpg-error pcre2 gnu-efi libmicrohttpd
    # systemd
    # procps-ng

    #  ruby
    #  glib2 gettext po4a fakeroot
    # llvm clang rust ruby
    # pacman arch-install-scripts pacman-contrib
    # dosfstools nano parted rsync
    # zsh grml-zsh-config zsh-autosuggestions zsh-syntax-highlighting
    # linux-firmware
    # libusb usbutils
    # wpa_supplicant
    # nvidia cuda cudnn nccl intel-mkl lapack
    # tmux
    # gobject-introspection graphite harfbuzz ghostscript xxhash lz4 popt texlive
    # xmlto help2man po4a
)

# ubuntu packages

ubuntu_pkgs=(

)

# tegra packages

tegra_pkgs=(
    pacman pacman-contrib
)

# functions

prepare() {
    (yes yes || :) | sudo pacman -Scc

    if [ ! -f /home/.repository/$TARGET/$TARGET.db ]; then
        update-repo -t $TARGET
    fi

    (yes yes || :) | sudo pacman -Syy
}

get_pkgbase() {
    local pkgbase
    case $1 in
        device-mapper)  pkgbase=lvm2;;
        *)              pkgbase=$1;;
    esac
    echo "$pkgbase"
}

update_key() {
    local pkgbase
    local pkgname
    pkgname=$1
    pkgbase=$(get_pkgbase $pkgname)

    cd $ROOTDIR/$TARGET/pkgbuilds/$pkgbase

    updpkgsums
    gpg --recv-keys $(grep -E -o "[0-9A-F]{40}" PKGBUILD)
}

build() {
    local pkgbase
    local pkgname
    pkgname=$1
    pkgbase=$(get_pkgbase $pkgname)

    cd $ROOTDIR/$TARGET/pkgbuilds/$pkgbase

    local log
    if [ -z $STAGE ]; then
        log="$LOGDIR"/$pkgbase.log
    else
        log="$LOGDIR"/$pkgbase.stage$STAGE.log
    fi
    if [ -f $log ]; then
        rm $log
    fi
    
    makepkg -scCf --noconfirm &>> $log

    update-repo -t $TARGET
    (yes yes || :) | sudo pacman -Scc
    (yes yes || :) | sudo pacman -Sddy --overwrite "*" $pkgname # --config $PACMAN_CONF
}

usage() {
    printf "lfs-build (kzl-linux) %s\n" "$VERSION"
    echo
    printf "lfs-build will build packages from scratch.\n"
    echo
    printf "Usage: lfs-build [options]\n"
    echo
    echo "    -h, --help        display this help message and exit"
    echo "    -v, --version     display version information and exit"
    echo "    -t, --target      build target (kzl(default), rpi, tegra, ubuntu)"
    echo "    -s, --stage       stage (stage0, stage1(default), stage2, stage3)"
    echo
}

# program start

set -e -u -o pipefail
# set -x

umask 0022

while (( "$#" )); do
    case "$1" in
        -h|--help)      usage; exit 0 ;;
        -v|--version)   printf "$VERSION"; exit 0 ;;
        -t|--target)    shift; TARGET="$1" ;;
        -s|--stage)     shift; STAGE="$1" ;;
        *)              printf "unknown option \"$1\""; exit 1 ;;
    esac
    shift
done

BUILDDIR=
LOGDIR=
REPODIR=/home/.repository/$TARGET

case $TARGET in
    kzl)            BUILDDIR=/tmp ;;
    ubuntu|tegra)   BUILDDIR=/dev/shm ;;
    *)              printf "unknown target \"$STAGE\""; exit 1 ;;
esac

LOGDIR=$BUILDDIR

if [ -d $BUILDDIR/makepkg ]; then
    rm -rf $BUILDDIR/makepkg
fi

# 
if [ "$TARGET" = "kzl" ]; then
    case $STAGE in
        0) update-repo --clear -t $TARGET; pkgs=${kzl_stage0_pkgs[@]} ;;
        1) pkgs=${kzl_stage1_pkgs[@]} ;;
        2) pkgs=${kzl_stage2_pkgs[@]} ;;
        *) printf "unknown stage \"$STAGE\""; exit 1 ;;
    esac
elif [ "$TARGET" = "ubuntu" ]; then
    pkgs=${ubuntu_pkgs[@]}
elif [ "$TARGET" = "tegra" ]; then
    update-repo --clear -t $TARGET
    pkgs=${tegra_pkgs[@]}
fi

prepare

for p in ${pkgs[@]}; do
    echo "update keys for $p ..."
    update_key $p &
done

wait

for p in ${pkgs[@]}; do
    echo "################################################################################"
    echo "   building $p ..."
    echo "################################################################################"
    build $p
done
